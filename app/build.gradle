apply plugin: 'com.android.application'
apply plugin: 'io.fabric'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'com.novoda.build-properties'
apply from: '../quality/jacocoApp.gradle'
apply from: '../quality/ktlint.gradle'

buildProperties {
    secrets {
        using(file('secrets.properties')) | file('secretsDefaults.properties')
    }
}

android {
    compileSdkVersion Versions.compileSdk
    buildToolsVersion Versions.buildTools
    dexOptions.javaMaxHeapSize "3g"

    defaultConfig {
        applicationId "piuk.blockchain.android"
        targetSdkVersion Versions.targetSdk
        minSdkVersion Versions.minSdk
        versionCode Versions.versionCode
        versionName Versions.versionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
        archivesBaseName = "blockchain-$versionName"
        // Flag to hide or show the Contacts feature
        buildConfigBoolean "CONTACTS_ENABLED", false
        buildConfigBoolean "SHOW_LOCKBOX_BALANCE", false
        buildConfigString "SHAPE_SHIFT_API_KEY", buildProperties.secrets['shapeShiftApiKey']
        manifestPlaceholders = [FABRIC_API_KEY: buildProperties.secrets['fabricApiKey'].string]
        resConfigs 'en',
                'cs',
                'de',
                'es',
                'fr',
                'id',
                'it',
                'ja',
                'ko',
                'ms',
                'nl',
                'pl',
                'pt',
                'pt-rBR',
                'ro',
                'ru',
                'sv',
                'th',
                'tr',
                'uk',
                'vi',
                'zh-rCN'
    }
    buildTypes {
        release {
            debuggable false
            minifyEnabled true
            zipAlignEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            multiDexEnabled true
            buildConfigBoolean "USE_CRASHLYTICS", true
        }
        debug {
            multiDexEnabled true
            buildConfigBoolean "USE_CRASHLYTICS", false
        }
    }
    bundle {
        language {
            // Specifies that the app bundle should not support
            // configuration APKs for language resources. These
            // resources are instead packaged with each base and
            // dynamic feature APK.
            enableSplit = false
        }
        density {
            enableSplit = true
        }
        abi {
            enableSplit = true
        }
    }

    flavorDimensions "environment"

    productFlavors {
        /**
         * Environments
         */
        envProd {
            dimension "environment"
            manifestPlaceholders = [DYNAMIC_LINK_HOST: buildProperties.secrets['prodDynamicLink'].string]
            buildConfigString "EXPLORER_URL", buildProperties.secrets['prodExplorer']
            buildConfigString "API_URL", buildProperties.secrets['prodApiServer']
            buildConfigString "BITCOIN_WEBSOCKET_URL", buildProperties.secrets['prodBtcWebsocket']
            buildConfigString "ETHEREUM_WEBSOCKET_URL", buildProperties.secrets['prodEthWebsocket']
            buildConfigString "BITCOIN_CASH_WEBSOCKET_URL", buildProperties.secrets['prodBchWebsocket']
            buildConfigString "XLM_WEBSOCKET_URL", buildProperties.secrets['prodXlmWebsocket']
            buildConfigString "NABU_WEBSOCKET_URL", buildProperties.secrets['prodNabuWebsocket']
            buildConfigString "HORIZON_URL", buildProperties.secrets['prodHorizonUrl']
            buildConfigField "String", "ENVIRONMENT", '"env_prod"'
        }
        envDev {
            dimension "environment"
            manifestPlaceholders = [DYNAMIC_LINK_HOST: buildProperties.secrets['devDynamicLink'].string]
            buildConfigString "EXPLORER_URL", buildProperties.secrets['devExplorer']
            buildConfigString "API_URL", buildProperties.secrets['devApiServer']
            buildConfigString "BITCOIN_WEBSOCKET_URL", buildProperties.secrets['devBtcWebsocket']
            buildConfigString "ETHEREUM_WEBSOCKET_URL", buildProperties.secrets['devEthWebsocket']
            buildConfigString "BITCOIN_CASH_WEBSOCKET_URL", buildProperties.secrets['devBchWebsocket']
            buildConfigString "XLM_WEBSOCKET_URL", buildProperties.secrets['devXlmWebsocket']
            buildConfigString "NABU_WEBSOCKET_URL", buildProperties.secrets['devNabuWebsocket']
            buildConfigString "HORIZON_URL", buildProperties.secrets['devHorizonUrl']
            buildConfigField "String", "ENVIRONMENT", '"env_dev"'
            versionNameSuffix '-dev'
        }
        envStaging {
            dimension "environment"
            manifestPlaceholders = [DYNAMIC_LINK_HOST: buildProperties.secrets['stagingDynamicLink'].string]
            buildConfigString "EXPLORER_URL", buildProperties.secrets['stagingExplorer']
            buildConfigString "API_URL", buildProperties.secrets['stagingApiServer']
            buildConfigString "BITCOIN_WEBSOCKET_URL", buildProperties.secrets['stagingBtcWebsocket']
            buildConfigString "ETHEREUM_WEBSOCKET_URL", buildProperties.secrets['stagingEthWebsocket']
            buildConfigString "BITCOIN_CASH_WEBSOCKET_URL", buildProperties.secrets['stagingBchWebsocket']
            buildConfigString "XLM_WEBSOCKET_URL", buildProperties.secrets['stagingXlmWebsocket']
            buildConfigString "NABU_WEBSOCKET_URL", buildProperties.secrets['stagingNabuWebsocket']
            buildConfigString "HORIZON_URL", buildProperties.secrets['stagingHorizonUrl']
            buildConfigField "String", "ENVIRONMENT", '"env_staging"'
            versionNameSuffix '-staging'
        }
        envTestnet {
            dimension "environment"
            manifestPlaceholders = [DYNAMIC_LINK_HOST: buildProperties.secrets['testnetDynamicLink'].string]
            buildConfigString "EXPLORER_URL", buildProperties.secrets['testnetExplorer']
            buildConfigString "API_URL", buildProperties.secrets['testnetApiServer']
            buildConfigString "BITCOIN_WEBSOCKET_URL", buildProperties.secrets['testnetBtcWebsocket']
            buildConfigString "ETHEREUM_WEBSOCKET_URL", buildProperties.secrets['testnetEthWebsocket']
            buildConfigString "BITCOIN_CASH_WEBSOCKET_URL", buildProperties.secrets['testnetBchWebsocket']
            buildConfigString "XLM_WEBSOCKET_URL", buildProperties.secrets['testnetXlmWebsocket']
            buildConfigString "NABU_WEBSOCKET_URL", buildProperties.secrets['testnetNabuWebsocket']
            buildConfigString "HORIZON_URL", buildProperties.secrets['testnetHorizonUrl']
            buildConfigField "String", "ENVIRONMENT", '"env_testnet"'
            versionNameSuffix '-testnet'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    lintOptions {
        checkReleaseBuilds true
        fatal 'StopShip'
        htmlReport true
        htmlOutput file("build/reports/lint-report.html")
        abortOnError true
        baseline file("lint-baseline.xml")
    }
    packagingOptions {
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/rxjava.properties'
        exclude 'jni/**'
        exclude 'solidity/**'
        exclude 'org.bitcoin.test.checkpoints.txt'
        exclude 'org.bitcoin.production.checkpoints.txt'
    }
    dataBinding.enabled true

    testOptions {
        // Fix for Robolectric bug when using AAPT2
        unitTests.includeAndroidResources true
        // Always show the result of every unit test, even if it passes.
        unitTests.all {
            testLogging {
                if (System.getenv().containsKey("CIRCLE_BUILD_NUM")) {
                    events 'skipped', 'failed'
                } else {
                    events 'skipped', 'failed', 'standardOut', 'standardError'
                }
            }
            reports.junitXml.destination = file('../build/test-results/')
            maxHeapSize = "1g"
        }
    }
}

kapt {
    useBuildCache = true
}

androidExtensions {
    experimental = true
}

dependencies {
    implementation project(':coreui')
    implementation project(':notifications')
    implementation project(':buysellui')
    implementation project(':kyc')
    implementation project(':morph:shapeshift')
    implementation project(':morph:homebrew')
    implementation project(':sunriver')
    implementation project(':lockbox')

    implementation Libraries.multidex
    // Utils
    implementation Libraries.yearclass
    // Dagger
    kapt Libraries.daggerKapt
    implementation Libraries.koin
    implementation Libraries.koinAndroid
    // Views
    implementation project(":zxing")
    implementation Libraries.countryPicker
    implementation Libraries.bottomNav
    implementation Libraries.circleIndicator
    implementation Libraries.charts

    // UI/Instrumentation Tests
    androidTestImplementation(Libraries.espresso) {
        exclude group: 'javax.inject', module: 'support-annotations'
    }
    // Unit Tests
    testImplementation Libraries.junit
    testImplementation Libraries.mockito
    testImplementation Libraries.hamcrestJunit
    testImplementation Libraries.kotlinJunit
    testImplementation Libraries.kluent
    testImplementation(Libraries.mockitoKotlin) {
        ['kotlin-stdlib', 'kotlin-reflect'].each { exclude module: it }
    }
    testImplementation(Libraries.robolectric) {
        exclude group: 'com.google.guava'
        exclude group: 'com.google.protobuf'
    }
    // For AS running of robolectric
    testImplementation Libraries.testRunner
    testImplementation Libraries.testRules

    testImplementation Libraries.json
    testImplementation project(':testutils-android')
}

buildscript {
    repositories {
        jcenter()
        maven { url 'https://maven.fabric.io/public' }
        maven { url "https://jitpack.io" }
    }

    dependencies {
        classpath Libraries.fabricTools
        classpath Libraries.buildProperties
    }
}

repositories {
    jcenter()
    // Required for CountryPicker
    maven { url "https://jitpack.io" }
    maven { url 'https://maven.fabric.io/public' }
}

// This must remain at the bottom of this file until Google work out a better way to do this
apply plugin: 'com.google.gms.google-services'