apply plugin: 'java-library'
apply plugin: 'kotlin'
apply plugin: 'jacoco'
apply plugin: 'com.github.kt3k.coveralls'
apply from: 'integTest.gradle'
apply from: '../quality/ktlint.gradle'

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath Libraries.kotlinGradlePlugin
    }
}

group = 'info.blockchain'

sourceCompatibility = 1.7
targetCompatibility = 1.7

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

repositories {
    jcenter()
    maven { url "https://dl.bintray.com/ethereum/maven/" }
}

task sourceJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

dependencies {
    // Expose Kotlin to all parent modules
    api Libraries.kotlin
    api files('libs/bitcoinj-core-0.15-SNAPSHOT.jar')
    api files('libs/api-client-0.1.16-SNAPSHOT.jar')
    api(Libraries.web3j) { exclude module: 'jackson' }
    implementation Libraries.spongyCastle
    compileOnly Libraries.json
    // Networking
    implementation Libraries.jacksonCore
    api Libraries.moshi
    implementation(Libraries.retrofit) { exclude module: 'okhttp' }
    implementation Libraries.retrofitJacksonConverter
    implementation Libraries.retrofitRxMoshiConverter
    implementation Libraries.retrofitRxJavaAdapter
    implementation Libraries.okHttpInterceptor
    // Utils
    implementation(Libraries.jjwt) { exclude module: 'jackson' }
    implementation Libraries.okIo
    implementation Libraries.commonsIo
    implementation Libraries.commonsCli
    implementation Libraries.lambdaWorks
    api Libraries.commonsCodec
    api Libraries.commonsLang
    api Libraries.urlBuilder
    // Logging
    implementation Libraries.slf4j
    // BitcoinJ dependencies
    implementation Libraries.protobuf
    implementation Libraries.findbugs
    api Libraries.guava

    // Testing
    testImplementation Libraries.junit
    testImplementation Libraries.mockito
    testImplementation Libraries.json
}

test {
    testLogging {
        events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
    }
}

jacocoTestReport {
    dependsOn("test")
    reports {
        xml.enabled = true
        html.enabled = true
    }
}

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.6"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.6"
    }
}